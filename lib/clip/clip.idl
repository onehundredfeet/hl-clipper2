

interface PathsD {
	void PathsD();

	[CObject, Internal="HLClip::addPolygonD"] void addPolygonD( double * coordinates, int vertCount );
	[CObject, Internal="HLClip::addPolygonsD"] void addPolygonsD( double * coordinates, int *vertCount, int polyCount );
	[CObject, Internal="HLClip::unionAll"] PathsD unionAll(bool fillHoles);
	[Internal="size"] int numPolygons();
	[CObject,Internal="HLClip::polygonCounts"] int polygonVertCounts( int *counts ); 
	[CObject,Internal="HLClip::getAllCoordinates"] void getAllCoordinates( double *coordinates2D ); 
};


[Internal="PartitionPolyIt"]
interface PartitionPolyIt {

	[Internal="GetNumPoints"] int getNumPoints();
	[Internal="GetPoints"] void getPoints(double *points);
	[Internal="IsValid"]  bool isValid();
	[Internal="Next"]  bool next();
};


[Internal="TPPLPolyList"] 
interface PartitionPolyList {
	void PartitionPolyList();
	[CObject, Internal="HLPartition::NumPolys"] int numPolys(  );
	[CObject, Internal="HLPartition::GetPolyIt"] PartitionPolyIt getPolyIt();
};


[Internal="TPPLPoly"] 
interface PartitionPoly {
	void PartitionPoly();
	[CObject, Internal="HLPartition::InitD"] void initD( double *coordinates, int vertCount);
	[CObject, Internal="HLPartition::ConvexPartitionOptimal"] void convexPartitionOptimal( PartitionPolyList result );
};
// need to add https://github.com/ivanfratric/polypartition

